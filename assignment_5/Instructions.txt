Lab 5 - Strings

Instructions

Create a folder called assignment_5 and inside it, create a file called lab5.py, which is where you will complete the following exercises:

1. Counting Vowels

Create a function that takes in a string and returns the number of vowels (A, E, I, O, U) that appear in the string. The string can be made up of any ASCII characters. Your function should not be case-sensitive.

The signature is:

def countVowels(s)
where the parameter s is a string, and the function returns an integer.

2. String Stability

Write a function that returns True if a given string is stable and False otherwise. String stability is defined as follows:

A string is said to be stable, if it can be split into two halves, where each half contains the same number of vowels. If the string is of an odd length, then the character in the middle is ignored when bisecting the string.

Example: The string abba is stable, because when we divide it into its two halves, ab and ba, they both have the same number of vowels, namely they each have one a. The string abbra is also stable because it splits into ab and ra (the b in the middle is ignored). The string computer is not stable because it splits into comp and uter, where the first half has only one vowel, whereas the second half has two.

The signature is:

def isStable(s)
where the parameter s is a string, and the function returns a boolean.

3. Detecting Double Letters in Words

Write a function that will take any string and check whether it has double letters, meaning the same letter appearing in more than one consecutive position.

Example: The word hello has a double letter l, the word ironic does not have any double letters because even though the i is repeated, the two copies do not appear next to each other.

The signature is:

def hasDoubleLetters(s)
where the parameter s is a string, and the function returns a boolean.

4. Interleaving Words

Write a function that will take in two strings and interleave their characters starting with the first parameter, continuing to alternate between the two strings, until one of them has run out.

Example: The strings "135" and "246" are interleaved as "123456". If the input strings are not of equal length, for example, "13579" and "24", then the process begins the same way, with the remainder of the longer string appended to the end of the result, therefore: "1234579".

The signature is:

def interleave(word1, word2)
where word1 and word2 are both strings, and the function returns a string.

5. Longest Common Prefix

Write a function that takes in two strings and returns their longest common prefix.

Example: The longest common prefix of the strings "hello" and "help" is "hel", whereas the strings "apple" and "orange" do not have a common prefix, so your function should return the empty string "".

The signature is:

def lcp(s1, s2)
where s1 and s2 are both strings, and the function returns a string.

6. CatCourses Spreadsheets

A somewhat annoying feature of CatCourses is that when one requests a report of some student data (for example grades), the system produces a spreadsheet where the full name of the individual appears as one string. We would like to extract just the last name from this string. Also recall that UC Merced emails addresses are constructed by taking the first letter of the user's first name, and concatenating that to the user's last name. Sometimes there are numbers appended at the end to ensure uniqueness. For example, the user Joe Soap would be given the email jsoap@ucmerced.edu.

Your task is to write a function that takes in full name as a string, and an email address as a string, and returns just the last name from the full name it received.

Example: The inputs "Steve Jobs", "sjobs@ucmerced.edu" result in the string "Jobs" being returned.

The signature is:

def extractLastName(full_name, email)
where full_name and email are both strings, and the function returns a string.

